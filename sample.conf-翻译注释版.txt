# Sample Quantumult Configuration
// 后为翻译版本

---
# General #

// 以 ";" 或 "#" 或 "//" 开头的行为注释行。
// SS-URI方案可在https://shadowsocks.org/en/spec/SIP002-URI-Scheme.html找到
// Quantumult使用HEAD方法将HTTP请求发送到server_check_url以测试代理的状态，结果应该是两个等待时间，第一个是与代理服务器的TCP握手，第二个是Quantumult成功接收到来自HTTP响应的总时间 server_check_url。
// 闪电图标表示TCP快速打开成功。 如果[server_local]节或[server_remote]节中的服务器具有自己的server_check_url，则将使用其自己的server_check_url代替[general]节中的server_check_url。
// dns_exclusion_list包含禁用了占位符IP（240. *）的域，不在dns_exclusion_list中的域都启用了占位符IP，并且已打开“远程解析”设置。
// udp_whitelist包含目标UDP端口，为空表示所有端口都在udp_whitelist中。 带有目的端口不在udp_whitelist中的UDP数据包（通过Quantumult隧道接口）将被丢弃。 此设置与策略无关，也与代理（服务器）端口无关。
// Quantumult将不会处理到exclude_routes的流量。 修改后最好重新启动设备。

[general]
;server_check_url=http://www.google.com/generate_204
;geo_location_checker=http://www.example.com/json/, https://www.example.com/script.js
dns_exclusion_list=*.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me
;ssid_suspended_list=LINK_22E174, LINK_22E175
;udp_whitelist=53, 123, 1900, 80-443
;excluded_routes= 192.168.0.0/16, 172.16.0.0/12, 100.64.0.0/10, 10.0.0.0/8
;icmp_auto_reply=true

---

# DNS #

# The DNS servers fetched from current network will always be used for better performance.
# The result of query will only be used for evaluating filter or connecting through direct policy, when connecting through server the result will not be used and Quantumult will never know the destination IP of related domain.
# Specially directly set 127.0.0.1 for a domain is not allowed in here. if you want some domain(eg: example.com) to be 127.0.0.1, just add "host, example.com, reject" to the "filter_local" section. The reject action will return DNS response with 127.0.0.1 to the query.
// 从当前网络获取的DNS服务器将始终用于提高性能。
// 查询结果仅用于评估过滤器或通过直接策略进行连接，通过服务器连接时将不使用结果，Quantumult将永远不知道相关域的目标IP。
// 此处不允许为域直接直接设置127.0.0.1。 如果您希望某个域（例如example.com）为127.0.0.1，则只需在“ filter_local”部分添加“ host，example.com，reject”。 拒绝操作会将带有127.0.0.1的DNS响应返回给查询。

[dns]
server=223.5.5.5
server=114.114.114.114
server=119.29.29.29
server=8.8.8.8
;server=8.8.4.4:53
;server=/example0.com/system
;server=/example1.com/8.8.4.4
;server=/*.example2.com/223.5.5.5
;server=/example4.com/[2001:4860:4860::8888]:53
;address=/example5.com/192.168.16.18
;address=/example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]

---

# Policy #

# static policy points to the server in candidates you manually selected.
# available policy points to the first available server in candidates based on server_check_url(concurrent url latency test will be immediately launched when the policy has been triggered and the policy result is unavailable. If no network request is taking the policy at that time, that means the policy is in the idle state and the test won't be launched even if the server is down. At that time you can update the server status by manually launching the test, but it doesn't make any sense).
# round-robin policy points to the next server in candidates for next connection.
# ssid policy points to the server depending on the network environment.
// 静态策略指向您手动选择的候选服务器。
// 可用策略指向基于server_check_url的候选服务器中的第一个可用服务器（并发URL延迟测试将在触发该策略且该策略结果不可用时立即启动。如果当时没有网络请求在采用该策略，则意味着 该策略处于空闲状态，即使服务器关闭也不会启动测试。那时，您可以通过手动启动测试来更新服务器状态，但这没有任何意义。
// round-robin策略指向下一个连接候选中的下一个服务器。
// ssid策略根据网络环境指向服务器。

[policy]
;static=policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png
;available=policy-name-2, Sample-A, Sample-B, Sample-C
;round-robin=policy-name-3, Sample-A, Sample-B, Sample-C
;ssid=policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C

---

# server_remote #

# Params "tag" and "enabled" are optional.
# The default sync interval for all kinds of remote resources is 24*60*60 seconds.
// 参数“标记”和“启用”是可选的。
// 所有远程资源的默认同步间隔为24 * 60 * 60秒。
#

[server_remote]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.txt, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server-complete.txt, tag=Sample-02, as-policy=static, img-url=http://example.com/icon.png, enabled=false

---

# filter_remote #

# Params "tag", "force-policy" and "enabled" are optional.
# When there is a force-policy, then the policy in filter of remote resource will be ignored and the force-policy will be used.
// 参数“ tag”，“ force-policy”和“ enabled”是可选的。
// 当存在强制策略时，将忽略远程资源过滤器中的策略，并使用强制策略。

[filter_remote]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/filter.txt, tag=Sample, force-policy=your-policy-name, enabled=true

---
# rewrite_remote #

# Params "tag" and "enabled" are optional.
// 参数“标记”和“启用”是可选的。
#
[rewrite_remote]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-import-rewrite.txt, tag=Sample, enabled=true

---

# server_local #

# Only obfs=http, obfs=ws, obfs=wss can have optional "obfs-uri" field.
# The obfs-host param in wss will be used for TLS handshake and for HTTP header host field, if obfs-host is not set for wss the server address will be used.
# The UDP relay for VMess and Trojan is not currently supported.
# When using obfs=ws and obfs=wss the server side can be deployed by v2ray-plugin with mux = 0 or by v2ray-core.
# The obfs plugin tls1.2_ticket_auth has one more RTT than tls1.2_ticket_fastauth and obfs tls, you'd better use tls1.2_ticket_fastauth instead.
# The method chacha20-ietf-poly1305 and chacha20-poly1305 have the same effect in VMess configuration.
// 仅obfs = http，obfs = ws，obfs = wss可以具有可选的“ obfs-uri”字段。
// wss中的obfs-host参数将用于TLS握手和HTTP标头主机字段，如果未为wss设置obfs-host，则将使用服务器地址。
// 当前不支持VMess和Trojan的UDP中继。
// 使用obfs = ws和obfs = wss时，服务器端可以通过v2ray-plugin（mux = 0）或v2ray-core进行部署。
// obfs插件tls1.2_ticket_auth的RTT比tls1.2_ticket_fastauth和obfs tls多，您最好改用tls1.2_ticket_fastauth。
// 方法chacha20-ietf-poly1305和chacha20-poly1305在VMess配置中具有相同的效果。

[server_local]
#
# Optional field tls13 is only for shadowsocks obfs=wss #
// 可选字段tls13仅适用于shadowsocks obfs = wss
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-03
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
#
# Optional field tls13 is only for vmess obfs=over-tls and obfs=wss #
// 可选字段tls13仅适用于vmess obfs = over-tls和obfs = wss
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03
#
# Optional field tls13 is only for http over-tls=true
// 可选字段tls13仅适用于http over-tls = true
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=http-tls-02
#
# Optional field tls13 is only for trojan over-tls=true
// 可选字段tls13仅适用于Trojan over-tls = true
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04

---

// 本地(局部)过滤
[filter_local]
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
;host-suffix, googleapis.com, proxy
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 224.0.0.0/24, direct
geoip, cn, direct
final, proxy

---

# rewrite_local #

# The "reject" returns HTTP status code 404 with no content.
# The "reject-200" returns HTTP status code 200 with no content.
# The "reject-img" returns HTTP status code 200 with content of 1px gif.
# The "reject-dict" returns HTTP status code 200 with content of empty json object.
# The "reject-array" returns HTTP status code 200 with content of empty json array.
# The "request-header" works for all the http headers not just one single header, so you can match two or more headers including CRLF in one regular expression.
# The length and encoding related HTTP header fields will be automatically processed by Quantumult if the "rewrite" is body related, so you should not handle them by yourself. The max supported response size is 256kB(decompressed) for response-body and script-response-body.
# The body related rewrite will not be executed if the body is empty.
# When using javascript in rewrite, you can use those objects: $request, $response, $notify(title, subtitle, message), console.log(message) and Quantumult's built-in objects all have prefix "$".
# Supports: $request.scheme, $request.method, $request.url, $request.path, $request.headers, $response.statusCode, $response.headers, $response.body
# The $notify(title, subtitle, message) will post iOS notifications if Quantumult notification has been enabled.
# The $prefs is for persistent store: $prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues().
# The console.log(message)  will output logs to Quantumult log file if the log level is "debug".
# The setTimeout(function() { }, interval) will run function after interval(ms).
# The scripts for script-request-header, script-request-body, script-response-header, script-response-body and script-echo-response should be saved in local "On My iPhone - Quantumult X - Scripts" or "iCloud Drive - Quantumult X - Scripts". Samples can be found at https://github.com/crossutility/Quantumult-X
// “拒绝”返回没有内容的HTTP状态代码404。
// “ reject-200”返回不带内容的HTTP状态码200。
// “ reject-img”返回HTTP状态码200，内容为1px gif。
// “ reject-dict”返回HTTP状态代码200，其中包含空json对象的内容。
// “ reject-array”返回HTTP状态代码200，其中包含空json数组。
// “ request-header”适用于所有http标头，而不仅仅是一个标头，因此您可以在一个正则表达式中匹配两个或更多个标头，包括CRLF。
// 如果“重写”与正文相关，那么与长度和编码相关的HTTP标头字段将由Quantumult自动处理，因此您不应自己处理它们。对于响应主体和脚本响应主体，最大支持的响应大小为256kB（解压缩）。
// 如果主体为空，则不会执行与主体相关的重写。
// 使用JavaScript重写时，可以使用以下对象：$ request，$ response，$ notify（标题，副标题，消息），console.log（message）和Quantumult的内置对象均带有前缀“ $”。
// 支持：$ request.scheme，$ request.method，$ request.url，$ request.path，$ request.headers，$ response.statusCode，$ response.headers，$ response.body
// 如果启用了Quantumult通知，则$ notify（title，subtitle，message）将发布iOS通知。
// $ prefs用于持久存储：$ prefs.valueForKey（key），$ prefs.setValueForKey（value，key），$ prefs.removeValueForKey（key），$ prefs.removeAllValues（）。
// 如果日志级别为“调试”，则console.log（message）会将日志输出到Quantumult日志文件。
// setTimeout（function（）{}，interval）将在interval（ms）之后运行。
// 脚本请求标头，脚本请求正文，脚本响应标头，脚本响应正文和脚本回显响应的脚本应保存在本地“在我的iPhone上-Quantumult X-脚本”或“ iCloud Drive-Quantumult X-脚本”。样本可以在https://github.com/crossutility/Quantumult-X中找到
＃
[rewrite_local]
;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js

---

# task_local #

# The $task.fetch() compose a HTTP request and deal with the response, only text body is supported. A $task.fetch() can be embeded in the completion handler of another $task.fetch(), if you want serial requests not current requests.
# The scripts should be saved in local "On My iPhone - Quantumult X - Scripts" or "iCloud Drive - Quantumult X - Scripts". Samples can be found at https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
# The default HTTP request timeout is 10 seconds.
#
# Supports 5 fields of cron excluding the command field.
// $ task.fetch（）组成一个HTTP请求并处理响应，仅支持文本主体。 如果您要串行请求而不是当前请求，则可以将$ task.fetch（）嵌入到另一个$ task.fetch（）的完成处理程序中。
// 脚本应保存在本地“在我的iPhone上-Quantumult X-脚本”或“ iCloud Drive-Quantumult X-脚本”中。 可以在https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js中找到示例
// 默认的HTTP请求超时时间为10秒。

// 支持cron的5个字段（命令字段除外）。
#
[task_local]
;* * * * * sample-task.js

---

# MitM #

# Only the TLS SNI or destination address in "hostname" will be handled by MitM.
#
# You should always keep your CA passphrase and p12 private.
// MitM将仅处理“主机名”中的TLS SNI或目标地址。
// 您应始终将CA密码和p12保密。
#
[mitm]
;passphrase =
;p12 =
;skip_validating_cert = false
;force_sni_domain_name = false
;hostname = *.example.com, *.sample.com
